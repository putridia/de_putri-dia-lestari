INPUT :
- Write an optimization SQL Query that calculate the number of books borrowed by each customer and then find the average.

OUTPUT : 
Optimized Query for Average Books Borrowed
Here's how we can optimize the previous query:

    WITH CustomerBorrows AS (
        SELECT 
            CustomerID,
            COUNT(BookID) AS TotalBooksBorrowed
        FROM Loans
        GROUP BY CustomerID
    )
    SELECT 
        c.CustomerID, 
        c.FirstName, 
        c.LastName,
        COALESCE(cb.TotalBooksBorrowed, 0) AS TotalBooksBorrowed,
        (
            SELECT AVG(TotalBooksBorrowed) 
            FROM CustomerBorrows
        ) AS AverageBooksBorrowed
    FROM 
        Customers c
    LEFT JOIN 
        CustomerBorrows cb ON c.CustomerID = cb.CustomerID;

Explanation of Optimizations:
CustomerBorrows CTE: We first create a Common Table Expression (CTE) called CustomerBorrows. This CTE efficiently calculates the total number of books borrowed by each customer using COUNT(BookID) and groups the results by CustomerID. This avoids performing the count for each customer in the main query.
LEFT JOIN: We use a LEFT JOIN to include customers who haven't borrowed any books (their TotalBooksBorrowed will be 0).
COALESCE: We use COALESCE to replace potential NULL values in the TotalBooksBorrowed column with 0 for customers who haven't borrowed any books.
Subquery for Average: We calculate the overall average number of books borrowed using a subquery within the main SELECT statement. This avoids the need for another join or CTE.